name: Deploy Movie App
run-name: ${{ github.actor }} is doing CICD to deploy AWS ECS


on:
  push:
    branches: 
      - main 

jobs:
  deploy:
    name: Deploy-Movie-App
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        aws-region: ap-southeast-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # - name: Login to Amazon ECR
    #     run: |
    #       aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 255945442255.dkr.ecr.ap-southeast-1.amazonaws.com
    #     env:
    #       AWS_ACCOUNT_ID: 255945442255

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: movie-app-image
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Initialize Terraform
      run: terraform init
      working-directory: .

    - name: Plan Terraform changes
      run: terraform plan
      working-directory: .  

    - name: Apply Terraform changes
      run: terraform apply -auto-approve
      working-directory: .

    # - name: Get ECS Task Definition JSON
    #   id: get-ecs-task-definition
    #   run: echo "::set-output name=ecs-task-definition-path::$(terraform output -json ecs_task_definition_json | jq -r '.value')"

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ecs-task-definition.json
    #     container-name: movie-app-image
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Register or update ECS task definition
    #   uses: aws-actions/amazon-ecs-register-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.get-ecs-task-definition.outputs.ecs-task-definition-path }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: movie-app-image-service
    #     cluster: movie-app-image-cluster
    #     wait-for-service-stability: true
